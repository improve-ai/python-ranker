Search.setIndex({"docnames": ["improveai", "improveai.chooser", "improveai.cythonized_feature_encoding", "improveai.cythonized_feature_encoding.cythonized_feature_encoder", "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils", "improveai.decision", "improveai.decision_context", "improveai.decision_model", "improveai.decision_tracker", "improveai.feature_encoder", "improveai.givens_provider", "improveai.improve_model_cli", "improveai.settings", "improveai.utils", "improveai.utils.choosers_feature_encoding_tools", "improveai.utils.general_purpose_tools", "improveai.utils.gzip_tools", "improveai.utils.url_tools", "index", "modules", "readme"], "filenames": ["improveai.rst", "improveai.chooser.rst", "improveai.cythonized_feature_encoding.rst", "improveai.cythonized_feature_encoding.cythonized_feature_encoder.rst", "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils.rst", "improveai.decision.rst", "improveai.decision_context.rst", "improveai.decision_model.rst", "improveai.decision_tracker.rst", "improveai.feature_encoder.rst", "improveai.givens_provider.rst", "improveai.improve_model_cli.rst", "improveai.settings.rst", "improveai.utils.rst", "improveai.utils.choosers_feature_encoding_tools.rst", "improveai.utils.general_purpose_tools.rst", "improveai.utils.gzip_tools.rst", "improveai.utils.url_tools.rst", "index.rst", "modules.rst", "readme.md"], "titles": ["improveai package", "chooser.py module", "improveai.cythonized_feature_encoding package", "cythonized_feature_encoder.pyx module", "cythonized_feature_encoding_utils.pyx module", "decision.py module", "decision_context.py module", "decision_model.py module", "decision_tracker.py module", "feature_encoder.py module", "givens_provider.py module", "improve_model_cli.py module", "settings.py module", "improveai.utils package", "choosers_feature_encoding_tools.py module", "general_purpose_tools.py module", "gzip_tools.py module", "url_tools.py module", "Welcome to Improve AI python SDK documentation!", "improveai", "Readme"], "terms": {"cythonized_feature_encod": [0, 19], "pyx": [0, 2], "featureencod": [0, 1, 2, 3, 9, 18, 19], "encod": [0, 1, 2, 3, 4, 9, 14, 18, 19, 20], "hash_to_feature_nam": [0, 2, 3, 9, 18, 19], "reverse_sprinkl": [0, 2, 3, 9, 18, 19], "shrink": [0, 2, 3, 9, 18, 19], "sprinkl": [0, 2, 3, 9, 18, 19], "warn_about_array_encod": [0, 2, 3, 9, 18, 19], "cythonized_feature_encoding_util": [0, 2], "encode_variants_multiple_given": [0, 2, 4, 18], "encode_variants_single_given": [0, 1, 2, 4, 18], "encoded_variant_into_np_row": [0, 2, 4, 18], "encoded_variants_to_np": [0, 2, 4, 13, 14, 18], "util": [0, 19], "choosers_feature_encoding_tool": [0, 13], "py": [0, 13, 19], "encoded_variant_to_np": [0, 13, 14, 18], "general_purpose_tool": [0, 13], "append_prefix_to_dict_kei": [0, 13, 15, 18], "check_vari": [0, 13, 15, 18], "get_variants_from_arg": [0, 13, 15, 18], "impute_missing_dict_kei": [0, 13, 15, 18], "is_object_numpy_typ": [0, 13, 15, 18], "is_valid_ksuid": [0, 13, 15, 18], "is_valid_variants_typ": [0, 13, 15, 18], "read_jsonstring_from_fil": [0, 13, 15, 18], "sigmoid": [0, 13, 15, 18], "gzip_tool": [0, 13], "check_and_get_unzipped_model": [0, 13, 16, 18], "get_unzip_gz": [0, 13, 16, 18], "is_gz_byt": [0, 13, 16, 18], "url_tool": [0, 13], "get_model_bytes_from_url": [0, 13, 17, 18], "is_path_http_addr": [0, 13, 17, 18], "chooser": [0, 7, 18, 19], "xgbchooser": [0, 1, 7, 18, 19], "improveai_version_kei": [0, 1, 18], "improve_ai_allowed_major_vers": [0, 1, 18], "model_feature_names_kei": [0, 1, 18], "model_metadata_kei": [0, 1, 18], "model_name_kei": [0, 1, 18], "model_name_regexp": [0, 1, 7, 18], "model_seed_kei": [0, 1, 18], "__init__": [0, 1, 2, 3, 5, 6, 7, 8, 9, 18], "calculate_predict": [0, 1, 18], "current_nois": [0, 1, 18], "feature_encod": [0, 1, 18, 19], "fill_missing_featur": [0, 1, 18], "get_model_src": [0, 1, 18], "imposed_nois": [0, 1, 18], "improveai_major_version_from_metadata": [0, 1, 18], "load_model": [0, 1, 7, 18, 19, 20], "model": [0, 1, 3, 6, 7, 8, 9, 14, 16, 17, 18, 20], "model_feature_nam": [0, 1, 18], "model_metadata": [0, 1, 18], "model_nam": [0, 1, 7, 8, 18], "model_se": [0, 1, 3, 9, 18], "score": [0, 1, 5, 6, 7, 18], "sort": [0, 1, 18, 20], "decis": [0, 6, 7, 8, 18, 19], "add_reward": [0, 5, 7, 8, 18, 20], "best": [0, 5, 6, 7, 8, 18, 20], "decision_model": [0, 5, 6, 18, 19], "get": [0, 1, 5, 6, 7, 8, 17, 18], "given": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 18, 20], "id_": [0, 5, 15, 18], "peek": [0, 5, 18], "rank": [0, 5, 6, 7, 8, 18], "track": [0, 5, 6, 7, 8, 18, 20], "decision_context": [0, 19], "decisioncontext": [0, 6, 7, 18, 19], "choose_first": [0, 6, 7, 18], "choose_from": [0, 6, 7, 18], "choose_multivari": [0, 6, 7, 18], "choose_random": [0, 6, 7, 18], "decid": [0, 6, 7, 18, 20], "first": [0, 5, 6, 7, 18, 20], "optim": [0, 6, 7, 18], "random": [0, 6, 7, 18], "which": [0, 1, 3, 6, 7, 8, 9, 10, 14, 15, 18, 20], "which_from": [0, 6, 7, 18], "decisionmodel": [0, 5, 6, 7, 10, 18, 19], "supported_cal": [0, 7, 18], "tiebreaker_multipli": [0, 7, 18], "full_factorial_vari": [0, 7, 18], "givens_provid": [0, 7, 18, 19], "last_decision_id": [0, 7, 18], "load": [0, 1, 7, 15, 18], "track_api_kei": [0, 7, 8, 18], "track_url": [0, 7, 8, 11, 18, 20], "tracker": [0, 7, 8, 18], "decision_track": [0, 19], "decisiontrack": [0, 7, 8, 18, 19], "api_key_head": [0, 8, 18], "decision_id_kei": [0, 8, 18], "decision_typ": [0, 8, 18], "givens_kei": [0, 8, 18], "message_id_kei": [0, 8, 18], "model_kei": [0, 8, 18], "payload_for_error_kei": [0, 8, 18], "request_error_code_kei": [0, 8, 18], "reward_kei": [0, 8, 18], "reward_typ": [0, 8, 18], "runners_up_kei": [0, 8, 18], "sample_kei": [0, 8, 18], "type_kei": [0, 8, 18], "variants_count_kei": [0, 8, 18], "variant_kei": [0, 8, 18], "api_kei": [0, 8, 18], "do_post_improve_request": [0, 8, 18], "get_sampl": [0, 8, 18], "max_runners_up": [0, 8, 18], "post_improve_request": [0, 8, 18], "variant_metadata_parameter_nam": [0, 9, 18], "add_extra_featur": [0, 2, 3, 9, 18], "encode_feature_vector": [0, 2, 3, 9, 18], "encode_given": [0, 2, 3, 9, 18], "encode_to_np_matrix": [0, 2, 3, 9, 18], "encode_vari": [0, 2, 3, 9, 18], "givensprovid": [0, 7, 10, 18, 19], "improve_model_cli": [0, 19], "mockup_and_execut": [0, 11, 19], "set": [0, 6, 7, 18, 19], "cython_backend_avail": [0, 12, 18, 19], "debug": [0, 1, 12, 18, 19], "gcc_and_py3_dev_instal": [0, 12, 18, 19], "class": [1, 3, 5, 6, 7, 8, 9, 10], "base": [1, 3, 5, 6, 7, 8, 9, 10], "object": [1, 3, 5, 6, 7, 8, 9, 10, 15, 20], "properti": [1, 5, 6, 7, 8, 20], "metadata": [1, 3, 9], "kei": [1, 3, 6, 7, 8, 9, 15, 20], "store": [1, 8, 14], "version": [1, 6, 7], "return": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 20], "ai": [1, 7, 8, 20], "improv": [1, 7, 8], "type": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18], "str": [1, 3, 5, 6, 7, 8, 9, 15, 16, 17], "latest": [1, 20], "support": [1, 7], "major": 1, "7": 1, "int": [1, 3, 7, 8, 9], "featur": [1, 3, 4, 9, 14, 18, 20], "name": [1, 3, 4, 6, 7, 8, 9, 14], "feature_nam": [1, 3, 4, 9, 14], "booster": [1, 7], "attr": 1, "user_defined_metadata": 1, "json": [1, 3, 8, 9, 15, 20], "string": [1, 3, 7, 9, 15, 16, 17, 20], "za": [1, 7], "z0": [1, 7], "9": [1, 7], "w": [1, 7], "0": [1, 3, 7, 9, 20], "63": [1, 7], "regexp": [1, 7], "us": [1, 3, 4, 5, 6, 7, 9, 14, 20], "verifi": [1, 7], "all": [1, 3, 7, 9, 14, 15, 20], "both": [1, 7, 12], "user": [1, 7, 8], "provid": [1, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 20], "cach": [1, 7], "seed": [1, 3, 9], "initi": [1, 18], "features_matrix": 1, "calcul": [1, 3, 7, 9, 15], "predict": [1, 14], "matrix": [1, 3, 9, 14], "paramet": [1, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17], "np": [1, 3, 4, 5, 6, 7, 8, 9, 14, 15], "ndarrai": [1, 3, 4, 5, 6, 7, 8, 9, 14, 15], "arrai": [1, 3, 4, 6, 7, 9, 14], "sourc": [1, 16, 17], "dmatrix": 1, "current": [1, 7, 20], "nois": [1, 3, 9], "valu": [1, 3, 7, 8, 9, 10, 14, 15, 20], "need": 1, "sdk": [1, 12, 20], "synthet": 1, "valid": [1, 7, 15, 20], "float": [1, 3, 5, 7, 8, 9, 15], "variant": [1, 3, 4, 5, 6, 7, 8, 9, 14, 15, 18], "implement": [1, 20], "helper": [1, 3, 9], "method": [1, 3, 7, 9, 15], "cython": [1, 3, 9, 12, 18], "loop": 1, "over": 1, "singl": [1, 3, 9, 14, 15, 20], "dict": [1, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 20], "list": [1, 3, 4, 5, 6, 7, 8, 9, 14, 15, 20], "tupl": [1, 5, 6, 7, 15], "collect": [1, 3, 4, 6, 7, 8, 9, 15, 20], "input": [1, 3, 6, 7, 9, 10, 15, 16], "none": [1, 3, 4, 5, 6, 7, 8, 9, 10, 20], "context": [1, 7, 20], "thi": [1, 3, 5, 6, 7, 8, 9, 20], "encoded_vari": [1, 3, 4, 9, 14], "fill": [1, 4, 14], "miss": [1, 3, 9, 14, 15], "pack": 1, "them": [1, 6, 7], "2d": [1, 3, 9, 14], "numpi": [1, 3, 9, 14, 15], "xgb": [1, 20], "static": [1, 7], "model_src": [1, 16], "src": 1, "from": [1, 3, 5, 6, 7, 8, 9, 14, 15, 17, 20], "path": [1, 7, 16], "url": [1, 7, 8, 17, 18, 20], "byte": [1, 16, 17], "pth": [1, 15], "download": [1, 17], "forc": 1, "input_model_src": 1, "verbos": 1, "fals": [1, 3, 6, 7, 9, 12, 15, 20], "desir": [1, 3, 4, 7, 9, 15], "bool": [1, 6, 7, 8, 12, 15, 16, 17], "should": [1, 8, 10, 12, 15, 20], "i": [1, 3, 6, 7, 8, 9, 12, 15, 16, 17, 20], "print": [1, 3, 9], "messag": [1, 5, 8, 12], "xgboost": [1, 3, 7, 9], "": [1, 3, 7, 9, 20], "defin": 1, "insid": 1, "under": 1, "constructor": [1, 5], "kwarg": [1, 3], "contain": [1, 4, 14], "pair": [1, 3, 9], "each": [1, 3, 9, 20], "row": [1, 4, 14, 20], "variants_w_scor": 1, "scores_col_idx": 1, "1": [1, 3, 9, 14, 20], "class_cols_idx": 1, "2": [1, 3, 9, 20], "perform": [1, 6, 7, 20], "index": [1, 18], "column": [1, 20], "label": 1, "__new__": [2, 3, 18], "serv": [3, 9], "preprocessor": [3, 9], "allow": [3, 7, 9], "convert": [3, 9, 14], "event": [3, 9], "data": [3, 6, 9, 20], "form": [3, 9], "line": [3, 9, 20], "extra": [3, 9], "tabular": [3, 9], "format": [3, 9], "expect": [3, 9, 20], "short": [3, 6, 7, 9], "summari": [3, 9], "append": [3, 8, 9, 15], "add_nois": [3, 9], "small": [3, 7, 9], "If": [3, 6, 7, 8, 9, 16, 20], "back": [3, 9], "work": [3, 9, 20], "much": [3, 9], "faster": [3, 9], "ad": [3, 5, 7, 9, 15], "alreadi": [3, 7, 9], "init": [3, 5, 6, 7, 8, 9], "param": [3, 5, 6, 7, 8, 9], "dure": [3, 5, 9], "onc": [3, 9], "ar": [3, 6, 7, 9, 10, 12, 14, 15, 20], "can": [3, 5, 7, 8, 9, 20], "quickli": [3, 9, 20], "updat": [3, 7, 9, 20], "extra_featur": [3, 9], "payload": [3, 8, 9], "fulli": [3, 4, 7, 9, 14], "must": [3, 5, 7, 9, 14, 20], "flat": [3, 9], "enncod": [3, 9], "entri": [3, 9], "onli": [3, 6, 7, 9, 14], "overlap": [3, 9, 14], "select": [3, 6, 7, 9], "result": [3, 6, 7, 9, 14, 20], "vector": [3, 9], "within": [3, 9, 20], "rang": [3, 9], "shrunk": [3, 9], "an": [3, 6, 7, 8, 9, 14, 15, 20], "insert": [3, 9], "arbitrari": [3, 9, 20], "complex": [3, 9, 20], "new": [3, 7, 9], "A": [3, 6, 7, 9, 20], "correspond": [3, 9], "complet": [3, 9], "multiple_given": [3, 9], "multiple_extra_featur": [3, 9], "when": [3, 9, 20], "serializ": [3, 9], "structur": [3, 9, 20], "sometim": [3, 9], "object_": [3, 9], "e": [3, 7, 8, 9], "g": [3, 8, 9], "etc": [3, 9], "rule": [3, 9], "go": [3, 9], "follow": [3, 9, 20], "null": [3, 7, 9], "nan": [3, 5, 9, 14, 15], "treat": [3, 9], "ignor": [3, 9], "technic": [3, 9], "check": [3, 7, 9, 12, 15, 16, 17], "anywai": [3, 9], "boolean": [3, 9], "true": [3, 9, 12, 15, 16, 20], "respect": [3, 9], "addit": [3, 9], "one": [3, 6, 7, 9, 16], "hot": [3, 9], "number": [3, 5, 8, 9, 20], "up": [3, 8, 9], "about": [3, 9, 18], "5": [3, 9], "decim": [3, 9], "place": [3, 9], "precis": [3, 9], "amount": [3, 9], "incorpor": [3, 9], "avoid": [3, 9], "overfit": [3, 9], "8": [3, 9], "hexadecim": [3, 9], "charact": [3, 9], "xxhash3": [3, 9], "gener": [3, 9, 18], "small_nois": [3, 9], "hash": [3, 9], "becom": [3, 9, 20], "integ": [3, 9], "output": [3, 9], "represent": [3, 9], "hex": [3, 9], "creat": [3, 6, 7, 9], "retriev": [3, 9], "sprinkled_x": [3, 9], "sprinkled_xx": [3, 9], "x": [3, 7, 9, 15], "wa": [3, 6, 7, 9], "hardcod": [3, 9], "factor": [3, 9], "17": [3, 9], "slightli": [3, 9], "modifi": [3, 9], "valus": [3, 9], "warn": [3, 9], "so": [3, 9, 16, 20], "speed": [3, 9], "doe": [3, 6, 7, 9, 20], "suffer": [3, 9], "reward": [5, 6, 7, 8, 20], "add": [5, 7, 8, 20], "inf": 5, "request": [5, 7, 8], "id": [5, 6, 7, 8, 15], "make": [5, 6, 7, 20], "ksuid": [5, 7, 8, 15], "without": [5, 6], "worst": [5, 6, 7], "obtain": 5, "choos": [6, 7], "gaussian": [6, 7], "_generate_descending_gaussian": [6, 7], "pass": [6, 7, 15], "posit": [6, 7, 20], "snapshot": 6, "made": [6, 8, 20], "avail": [6, 7], "variant_map": [6, 7], "configur": [6, 7, 20], "full": [6, 7], "factori": [6, 7], "map": [6, 7, 20], "combin": [6, 7], "shuffl": [6, 7], "chosen": [6, 7], "randomli": [6, 7], "order": [6, 7], "default": [6, 7], "befor": [6, 7], "nullabl": [6, 8], "flag": [6, 16, 20], "indic": [6, 12, 16], "d": [6, 7], "accept": [6, 7], "python": [6, 7, 12, 15, 20], "arg": [6, 7, 15], "float64": [6, 7], "hand": [6, 7], "choosefrom": [6, 7], "directli": [6, 7], "automat": [6, 7, 20], "process": [6, 7, 20], "would": [6, 7, 20], "vararg": [6, 7], "also": [6, 7, 20], "take": [6, 7, 8, 20], "argument": [6, 7, 15], "throw": [6, 7], "except": [6, 7], "sinc": [6, 7], "through": [6, 7], "addreward": [6, 7], "call": [7, 20], "cli": 7, "lead": 7, "gym": [7, 20], "endpoint": [7, 8], "api": [7, 8, 20], "decision_id": [7, 8, 20], "assign": [7, 8, 20], "wrapper": [7, 15], "chain": 7, "variants_map": 7, "variants_0": 7, "01": 7, "02": 7, "variants_1": 7, "11": 7, "12": [7, 20], "13": 7, "22": 7, "23": 7, "persist": [7, 20], "last": 7, "model_url": [7, 17, 20], "synchron": 7, "instanc": [7, 10], "f": 7, "otherwis": [7, 12, 15, 20], "sent": [7, 8], "http": [7, 17, 20], "header": [7, 8, 12], "omit": 7, "bodi": 8, "case": 8, "info": 8, "caus": 8, "error": 8, "code": [8, 20], "runner": 8, "sampl": 8, "well": 8, "count": 8, "applic": 8, "payload_json": 8, "execut": [8, 20], "post": 8, "improveai": [8, 20], "dump": 8, "ranked_vari": 8, "track_runners_up": 8, "runenr": 8, "account": 8, "maximum": 8, "includ": [8, 10, 20], "body_valu": 8, "message_id": 8, "block": 8, "callabl": 8, "option": 8, "causal": 8, "system": [8, 20], "observ": 8, "happen": 8, "hash_": 9, "for_model": 10, "dm": 10, "executed_funct": 11, "function_kwarg": 11, "mockup_track_endpoint": 11, "backend": 12, "usabl": 12, "level": 12, "shown": 12, "gcc": 12, "python3": 12, "instal": [12, 18], "put": 14, "those": 14, "shape": 14, "num": 14, "n": 14, "m": 14, "present": 14, "input_dict": 15, "prfx": 15, "prefix": 15, "prf": 15, "thei": 15, "empti": 15, "extract": 15, "all_des_kei": 15, "imputed_dict": 15, "imputer_valu": 15, "imput": 15, "necessari": 15, "checked_object": 15, "nupi": 15, "path_to_fil": 15, "mode": [15, 20], "r": 15, "readlin": 15, "decode_escape_char": 15, "safe": 15, "read": 15, "file": [15, 16], "doubl": 15, "escap": 15, "repalc": 15, "logit_const": 15, "function": 15, "constant": 15, "compress": 16, "unzip": 16, "union": 16, "cna": 16, "either": 16, "decompress": 16, "to_be_unzpd_byt": 16, "chkd_byte": 16, "gz": [16, 20], "zip": 16, "stream": 16, "being": [16, 20], "pth_to_model": 17, "address": 17, "usag": 18, "contextu": 18, "multivari": 18, "privaci": 18, "resourc": 18, "help": 18, "our": 18, "world": 18, "cythonizedfeatureencod": 18, "purpos": 18, "tool": 18, "gzip": 18, "modul": [18, 19], "search": [18, 20], "page": 18, "packag": 19, "subpackag": 19, "submodul": 19, "content": 19, "machin": 20, "learn": 20, "platform": 20, "app": 20, "person": 20, "recommend": 20, "io": 20, "android": 20, "The": 20, "simpl": 20, "immedi": 20, "devic": 20, "zero": 20, "network": 20, "latenc": 20, "cloud": 20, "train": 20, "regularli": 20, "aw": 20, "sagemak": 20, "pip3": 20, "import": 20, "xxxx": 20, "lambda": 20, "u": 20, "east": 20, "s3": 20, "amazonaw": 20, "com": 20, "greet": 20, "greetings_model": 20, "heart": 20, "statement": 20, "like": 20, "hello": 20, "howdi": 20, "hola": 20, "highest": 20, "condit": 20, "easili": 20, "reinforc": 20, "success": 20, "With": 20, "outcom": 20, "carrot": 20, "neg": 20, "undesir": 20, "stick": 20, "unlik": 20, "b": 20, "test": 20, "via": 20, "languag": 20, "cowboi": 20, "choic": 20, "fundament": 20, "task": 20, "engin": 20, "social": 20, "media": 20, "feed": 20, "fast": 20, "ranked_win": 20, "sommelier_model": 20, "entre": 20, "wine": 20, "note": 20, "easi": 20, "turn": 20, "ani": 20, "databas": 20, "tabl": 20, "simpli": 20, "conversion_rate_model": 20, "At": 20, "queri": 20, "time": 20, "descend": 20, "top": 20, "craft": 20, "custom": 20, "algorithm": 20, "supplement": 20, "metric": 20, "multi": 20, "stage": 20, "joint": 20, "multipl": 20, "variabl": 20, "simultan": 20, "often": 20, "tune": 20, "config": 20, "config_model": 20, "buffer_s": 20, "1024": 20, "2048": 20, "4096": 20, "8192": 20, "video_bitr": 20, "256000": 20, "384000": 20, "512000": 20, "exampl": 20, "notic": 20, "instead": 20, "dictionari": 20, "variat": 20, "jointli": 20, "credit": 20, "most": 20, "recent": 20, "previou": 20, "session": 20, "nest": 20, "item": 20, "assist": 20, "discount": 20, "discounts_model": 20, "3": 20, "enabl": 20, "feature_flag_model": 20, "filter_model": 20, "theme": 20, "font": 20, "helvetica": 20, "size": 20, "color": 20, "000000": 20, "comic": 20, "san": 20, "16": 20, "f0f0f0": 20, "themes_model": 20, "It": 20, "strongli": 20, "never": 20, "identifi": 20, "inform": 20, "pii": 20, "quick": 20, "start": 20, "guid": 20, "doc": 20, "trainer": 20, "free": 20, "pro": 20, "mission": 20, "corner": 20, "littl": 20, "bit": 20, "better": 20, "dai": 20, "whole": 20, "your": 20, "product": 20, "do": 20, "welcom": 20, "hope": 20, "you": 20, "find": 20, "my": 20, "labor": 20, "love": 20, "justin": 20, "chapwesk": 20}, "objects": {"": [[0, 0, 0, "-", "improveai"]], "improveai": [[1, 0, 0, "-", "chooser"], [2, 0, 0, "-", "cythonized_feature_encoding"], [5, 0, 0, "-", "decision"], [6, 0, 0, "-", "decision_context"], [7, 0, 0, "-", "decision_model"], [8, 0, 0, "-", "decision_tracker"], [9, 0, 0, "-", "feature_encoder"], [10, 0, 0, "-", "givens_provider"], [11, 0, 0, "-", "improve_model_cli"], [12, 0, 0, "-", "settings"], [13, 0, 0, "-", "utils"]], "improveai.chooser": [[1, 1, 1, "", "XGBChooser"]], "improveai.chooser.XGBChooser": [[1, 2, 1, "", "IMPROVEAI_VERSION_KEY"], [1, 2, 1, "", "IMPROVE_AI_ALLOWED_MAJOR_VERSION"], [1, 2, 1, "", "MODEL_FEATURE_NAMES_KEY"], [1, 2, 1, "", "MODEL_METADATA_KEY"], [1, 2, 1, "", "MODEL_NAME_KEY"], [1, 3, 1, "", "MODEL_NAME_REGEXP"], [1, 2, 1, "", "MODEL_SEED_KEY"], [1, 4, 1, "", "__init__"], [1, 4, 1, "", "calculate_predictions"], [1, 2, 1, "", "current_noise"], [1, 4, 1, "", "encode_variants_single_givens"], [1, 2, 1, "", "feature_encoder"], [1, 4, 1, "", "fill_missing_features"], [1, 4, 1, "", "get_model_src"], [1, 2, 1, "", "imposed_noise"], [1, 2, 1, "", "improveai_major_version_from_metadata"], [1, 4, 1, "", "load_model"], [1, 2, 1, "", "model"], [1, 2, 1, "", "model_feature_names"], [1, 2, 1, "", "model_feature_names_key"], [1, 2, 1, "", "model_metadata"], [1, 2, 1, "", "model_metadata_key"], [1, 2, 1, "", "model_name"], [1, 2, 1, "", "model_name_key"], [1, 2, 1, "", "model_seed"], [1, 2, 1, "", "model_seed_key"], [1, 4, 1, "", "score"], [1, 4, 1, "", "sort"]], "improveai.cythonized_feature_encoding": [[3, 0, 0, "-", "cythonized_feature_encoder"], [4, 0, 0, "-", "cythonized_feature_encoding_utils"]], "improveai.cythonized_feature_encoding.cythonized_feature_encoder": [[3, 1, 1, "", "FeatureEncoder"], [3, 5, 1, "", "encode"], [3, 5, 1, "", "hash_to_feature_name"], [3, 5, 1, "", "reverse_sprinkle"], [3, 5, 1, "", "shrink"], [3, 5, 1, "", "sprinkle"], [3, 5, 1, "", "warn_about_array_encoding"]], "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder": [[3, 4, 1, "", "__init__"], [3, 4, 1, "", "__new__"], [3, 4, 1, "", "add_extra_features"], [3, 4, 1, "", "encode_feature_vector"], [3, 4, 1, "", "encode_givens"], [3, 4, 1, "", "encode_to_np_matrix"], [3, 4, 1, "", "encode_variant"]], "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils": [[4, 5, 1, "", "encode_variants_multiple_givens"], [4, 5, 1, "", "encode_variants_single_givens"], [4, 5, 1, "", "encoded_variant_into_np_row"], [4, 5, 1, "", "encoded_variants_to_np"]], "improveai.decision": [[5, 1, 1, "", "Decision"]], "improveai.decision.Decision": [[5, 4, 1, "", "__init__"], [5, 4, 1, "", "add_reward"], [5, 2, 1, "", "best"], [5, 2, 1, "", "decision_model"], [5, 4, 1, "", "get"], [5, 2, 1, "", "givens"], [5, 2, 1, "", "id_"], [5, 4, 1, "", "peek"], [5, 2, 1, "", "ranked"], [5, 4, 1, "", "track"]], "improveai.decision_context": [[6, 1, 1, "", "DecisionContext"]], "improveai.decision_context.DecisionContext": [[6, 4, 1, "", "__init__"], [6, 4, 1, "", "choose_first"], [6, 4, 1, "", "choose_from"], [6, 4, 1, "", "choose_multivariate"], [6, 4, 1, "", "choose_random"], [6, 4, 1, "", "decide"], [6, 2, 1, "", "decision_model"], [6, 4, 1, "", "first"], [6, 2, 1, "", "givens"], [6, 4, 1, "", "optimize"], [6, 4, 1, "", "random"], [6, 4, 1, "", "rank"], [6, 4, 1, "", "score"], [6, 4, 1, "", "which"], [6, 4, 1, "", "which_from"]], "improveai.decision_model": [[7, 1, 1, "", "DecisionModel"], [7, 5, 1, "", "load_model"]], "improveai.decision_model.DecisionModel": [[7, 3, 1, "", "MODEL_NAME_REGEXP"], [7, 3, 1, "", "SUPPORTED_CALLS"], [7, 2, 1, "", "TIEBREAKER_MULTIPLIER"], [7, 4, 1, "", "__init__"], [7, 4, 1, "", "add_reward"], [7, 4, 1, "", "choose_first"], [7, 4, 1, "", "choose_from"], [7, 4, 1, "", "choose_multivariate"], [7, 4, 1, "", "choose_random"], [7, 2, 1, "", "chooser"], [7, 4, 1, "", "decide"], [7, 4, 1, "", "first"], [7, 4, 1, "", "full_factorial_variants"], [7, 4, 1, "", "given"], [7, 2, 1, "", "givens_provider"], [7, 2, 1, "", "last_decision_id"], [7, 4, 1, "", "load"], [7, 2, 1, "", "model_name"], [7, 4, 1, "", "optimize"], [7, 4, 1, "", "random"], [7, 4, 1, "", "rank"], [7, 4, 1, "", "score"], [7, 2, 1, "", "track_api_key"], [7, 2, 1, "", "track_url"], [7, 2, 1, "", "tracker"], [7, 4, 1, "", "which"], [7, 4, 1, "", "which_from"]], "improveai.decision_tracker": [[8, 1, 1, "", "DecisionTracker"]], "improveai.decision_tracker.DecisionTracker": [[8, 2, 1, "", "API_KEY_HEADER"], [8, 2, 1, "", "DECISION_ID_KEY"], [8, 2, 1, "", "DECISION_TYPE"], [8, 2, 1, "", "GIVENS_KEY"], [8, 2, 1, "", "MESSAGE_ID_KEY"], [8, 2, 1, "", "MODEL_KEY"], [8, 2, 1, "", "PAYLOAD_FOR_ERROR_KEY"], [8, 2, 1, "", "REQUEST_ERROR_CODE_KEY"], [8, 2, 1, "", "REWARD_KEY"], [8, 2, 1, "", "REWARD_TYPE"], [8, 2, 1, "", "RUNNERS_UP_KEY"], [8, 2, 1, "", "SAMPLE_KEY"], [8, 2, 1, "", "TYPE_KEY"], [8, 2, 1, "", "VARIANTS_COUNT_KEY"], [8, 2, 1, "", "VARIANT_KEY"], [8, 4, 1, "", "__init__"], [8, 4, 1, "", "add_reward"], [8, 2, 1, "", "api_key"], [8, 4, 1, "", "do_post_improve_request"], [8, 4, 1, "", "get_sample"], [8, 2, 1, "", "max_runners_up"], [8, 4, 1, "", "post_improve_request"], [8, 4, 1, "", "track"], [8, 2, 1, "", "track_url"]], "improveai.feature_encoder": [[9, 1, 1, "", "FeatureEncoder"], [9, 5, 1, "", "encode"], [9, 5, 1, "", "hash_to_feature_name"], [9, 5, 1, "", "reverse_sprinkle"], [9, 5, 1, "", "shrink"], [9, 5, 1, "", "sprinkle"], [9, 5, 1, "", "warn_about_array_encoding"]], "improveai.feature_encoder.FeatureEncoder": [[9, 3, 1, "", "VARIANT_METADATA_PARAMETER_NAME"], [9, 4, 1, "", "__init__"], [9, 4, 1, "", "add_extra_features"], [9, 4, 1, "", "encode_feature_vector"], [9, 4, 1, "", "encode_givens"], [9, 4, 1, "", "encode_to_np_matrix"], [9, 4, 1, "", "encode_variant"]], "improveai.givens_provider": [[10, 1, 1, "", "GivensProvider"]], "improveai.givens_provider.GivensProvider": [[10, 4, 1, "", "givens"]], "improveai.improve_model_cli": [[11, 5, 1, "", "mockup_and_execute"]], "improveai.settings": [[12, 6, 1, "", "CYTHON_BACKEND_AVAILABLE"], [12, 6, 1, "", "DEBUG"], [12, 5, 1, "", "gcc_and_py3_dev_installed"]], "improveai.utils": [[14, 0, 0, "-", "choosers_feature_encoding_tools"], [15, 0, 0, "-", "general_purpose_tools"], [16, 0, 0, "-", "gzip_tools"], [17, 0, 0, "-", "url_tools"]], "improveai.utils.choosers_feature_encoding_tools": [[14, 5, 1, "", "encoded_variant_to_np"], [14, 5, 1, "", "encoded_variants_to_np"]], "improveai.utils.general_purpose_tools": [[15, 5, 1, "", "append_prefix_to_dict_keys"], [15, 5, 1, "", "check_variants"], [15, 5, 1, "", "get_variants_from_args"], [15, 5, 1, "", "impute_missing_dict_keys"], [15, 5, 1, "", "is_object_numpy_type"], [15, 5, 1, "", "is_valid_ksuid"], [15, 5, 1, "", "is_valid_variants_type"], [15, 5, 1, "", "read_jsonstring_from_file"], [15, 5, 1, "", "sigmoid"]], "improveai.utils.gzip_tools": [[16, 5, 1, "", "check_and_get_unzipped_model"], [16, 5, 1, "", "get_unzip_gz"], [16, 5, 1, "", "is_gz_bytes"]], "improveai.utils.url_tools": [[17, 5, 1, "", "get_model_bytes_from_url"], [17, 5, 1, "", "is_path_http_addr"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"improveai": [0, 2, 13, 19], "packag": [0, 2, 13], "subpackag": 0, "submodul": [0, 2, 13], "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "content": [0, 2, 13], "chooser": 1, "py": [1, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17], "cythonized_feature_encod": [2, 3], "pyx": [3, 4], "cythonized_feature_encoding_util": 4, "decis": [5, 20], "decision_context": 6, "decision_model": 7, "decision_track": 8, "feature_encod": 9, "givens_provid": 10, "improve_model_cli": 11, "set": 12, "util": [13, 18], "choosers_feature_encoding_tool": 14, "general_purpose_tool": 15, "gzip_tool": 16, "url_tool": 17, "welcom": 18, "improv": [18, 20], "ai": 18, "python": 18, "sdk": 18, "document": 18, "readm": [18, 20], "class": 18, "indic": 18, "tabl": 18, "instal": 20, "initi": 20, "usag": 20, "contextu": 20, "rank": 20, "score": 20, "multivari": 20, "optim": 20, "variant": 20, "type": 20, "privaci": 20, "resourc": 20, "help": 20, "our": 20, "world": 20}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"improveai package": [[0, "improveai-package"]], "Subpackages": [[0, "subpackages"]], "Submodules": [[0, "submodules"], [2, "submodules"], [13, "submodules"]], "Module contents": [[0, "module-improveai"], [2, "module-improveai.cythonized_feature_encoding"], [13, "module-improveai.utils"]], "chooser.py module": [[1, "module-improveai.chooser"]], "improveai.cythonized_feature_encoding package": [[2, "improveai-cythonized-feature-encoding-package"]], "cythonized_feature_encoder.pyx module": [[3, "module-improveai.cythonized_feature_encoding.cythonized_feature_encoder"]], "cythonized_feature_encoding_utils.pyx module": [[4, "module-improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils"]], "decision.py module": [[5, "module-improveai.decision"]], "decision_context.py module": [[6, "module-improveai.decision_context"]], "decision_model.py module": [[7, "module-improveai.decision_model"]], "decision_tracker.py module": [[8, "module-improveai.decision_tracker"]], "feature_encoder.py module": [[9, "module-improveai.feature_encoder"]], "givens_provider.py module": [[10, "module-improveai.givens_provider"]], "improve_model_cli.py module": [[11, "module-improveai.improve_model_cli"]], "settings.py module": [[12, "module-improveai.settings"]], "improveai.utils package": [[13, "improveai-utils-package"]], "choosers_feature_encoding_tools.py module": [[14, "module-improveai.utils.choosers_feature_encoding_tools"]], "general_purpose_tools.py module": [[15, "module-improveai.utils.general_purpose_tools"]], "gzip_tools.py module": [[16, "module-improveai.utils.gzip_tools"]], "url_tools.py module": [[17, "module-improveai.utils.url_tools"]], "Welcome to Improve AI python SDK documentation!": [[18, "welcome-to-improve-ai-python-sdk-documentation"]], "Readme:": [[18, null]], "Classes:": [[18, null]], "Utils:": [[18, null]], "Indices and tables": [[18, "indices-and-tables"]], "improveai": [[19, "improveai"]], "Readme": [[20, "readme"]], "Installation": [[20, "installation"]], "Initialization": [[20, "initialization"]], "Usage": [[20, "usage"]], "Contextual Decisions": [[20, "contextual-decisions"]], "Ranking": [[20, "ranking"]], "Scoring": [[20, "scoring"]], "Multivariate Optimization": [[20, "multivariate-optimization"]], "Variant Types": [[20, "variant-types"]], "Privacy": [[20, "privacy"]], "Resources": [[20, "resources"]], "Help Improve Our World": [[20, "help-improve-our-world"]]}, "indexentries": {"improveai": [[0, "module-improveai"]], "module": [[0, "module-improveai"], [1, "module-improveai.chooser"], [2, "module-improveai.cythonized_feature_encoding"], [3, "module-improveai.cythonized_feature_encoding.cythonized_feature_encoder"], [4, "module-improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils"], [5, "module-improveai.decision"], [6, "module-improveai.decision_context"], [7, "module-improveai.decision_model"], [8, "module-improveai.decision_tracker"], [9, "module-improveai.feature_encoder"], [10, "module-improveai.givens_provider"], [11, "module-improveai.improve_model_cli"], [12, "module-improveai.settings"], [13, "module-improveai.utils"], [14, "module-improveai.utils.choosers_feature_encoding_tools"], [15, "module-improveai.utils.general_purpose_tools"], [16, "module-improveai.utils.gzip_tools"], [17, "module-improveai.utils.url_tools"]], "improveai_version_key (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.IMPROVEAI_VERSION_KEY"]], "improve_ai_allowed_major_version (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.IMPROVE_AI_ALLOWED_MAJOR_VERSION"]], "model_feature_names_key (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.MODEL_FEATURE_NAMES_KEY"], [1, "improveai.chooser.XGBChooser.model_feature_names_key"]], "model_metadata_key (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.MODEL_METADATA_KEY"], [1, "improveai.chooser.XGBChooser.model_metadata_key"]], "model_name_key (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.MODEL_NAME_KEY"], [1, "improveai.chooser.XGBChooser.model_name_key"]], "model_name_regexp (xgbchooser attribute)": [[1, "improveai.chooser.XGBChooser.MODEL_NAME_REGEXP"]], "model_seed_key (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.MODEL_SEED_KEY"], [1, "improveai.chooser.XGBChooser.model_seed_key"]], "xgbchooser (class in improveai.chooser)": [[1, "improveai.chooser.XGBChooser"]], "__init__() (xgbchooser method)": [[1, "improveai.chooser.XGBChooser.__init__"]], "calculate_predictions() (xgbchooser method)": [[1, "improveai.chooser.XGBChooser.calculate_predictions"]], "current_noise (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.current_noise"]], "encode_variants_single_givens() (xgbchooser method)": [[1, "improveai.chooser.XGBChooser.encode_variants_single_givens"]], "feature_encoder (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.feature_encoder"]], "fill_missing_features() (xgbchooser method)": [[1, "improveai.chooser.XGBChooser.fill_missing_features"]], "get_model_src() (xgbchooser static method)": [[1, "improveai.chooser.XGBChooser.get_model_src"]], "imposed_noise (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.imposed_noise"]], "improveai.chooser": [[1, "module-improveai.chooser"]], "improveai_major_version_from_metadata (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.improveai_major_version_from_metadata"]], "load_model() (xgbchooser method)": [[1, "improveai.chooser.XGBChooser.load_model"]], "model (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.model"]], "model_feature_names (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.model_feature_names"]], "model_metadata (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.model_metadata"]], "model_name (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.model_name"]], "model_seed (xgbchooser property)": [[1, "improveai.chooser.XGBChooser.model_seed"]], "score() (xgbchooser method)": [[1, "improveai.chooser.XGBChooser.score"]], "sort() (xgbchooser method)": [[1, "improveai.chooser.XGBChooser.sort"]], "improveai.cythonized_feature_encoding": [[2, "module-improveai.cythonized_feature_encoding"]], "featureencoder (class in improveai.cythonized_feature_encoding.cythonized_feature_encoder)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder"]], "__init__() (featureencoder method)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder.__init__"], [9, "improveai.feature_encoder.FeatureEncoder.__init__"]], "__new__() (featureencoder method)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder.__new__"]], "add_extra_features() (featureencoder method)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder.add_extra_features"], [9, "improveai.feature_encoder.FeatureEncoder.add_extra_features"]], "encode() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoder)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.encode"]], "encode_feature_vector() (featureencoder method)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder.encode_feature_vector"], [9, "improveai.feature_encoder.FeatureEncoder.encode_feature_vector"]], "encode_givens() (featureencoder method)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder.encode_givens"], [9, "improveai.feature_encoder.FeatureEncoder.encode_givens"]], "encode_to_np_matrix() (featureencoder method)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder.encode_to_np_matrix"], [9, "improveai.feature_encoder.FeatureEncoder.encode_to_np_matrix"]], "encode_variant() (featureencoder method)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.FeatureEncoder.encode_variant"], [9, "improveai.feature_encoder.FeatureEncoder.encode_variant"]], "hash_to_feature_name() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoder)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.hash_to_feature_name"]], "improveai.cythonized_feature_encoding.cythonized_feature_encoder": [[3, "module-improveai.cythonized_feature_encoding.cythonized_feature_encoder"]], "reverse_sprinkle() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoder)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.reverse_sprinkle"]], "shrink() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoder)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.shrink"]], "sprinkle() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoder)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.sprinkle"]], "warn_about_array_encoding() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoder)": [[3, "improveai.cythonized_feature_encoding.cythonized_feature_encoder.warn_about_array_encoding"]], "encode_variants_multiple_givens() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils)": [[4, "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils.encode_variants_multiple_givens"]], "encode_variants_single_givens() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils)": [[4, "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils.encode_variants_single_givens"]], "encoded_variant_into_np_row() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils)": [[4, "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils.encoded_variant_into_np_row"]], "encoded_variants_to_np() (in module improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils)": [[4, "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils.encoded_variants_to_np"]], "improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils": [[4, "module-improveai.cythonized_feature_encoding.cythonized_feature_encoding_utils"]], "decision (class in improveai.decision)": [[5, "improveai.decision.Decision"]], "__init__() (decision method)": [[5, "improveai.decision.Decision.__init__"]], "add_reward() (decision method)": [[5, "improveai.decision.Decision.add_reward"]], "best (decision property)": [[5, "improveai.decision.Decision.best"]], "decision_model (decision property)": [[5, "improveai.decision.Decision.decision_model"]], "get() (decision method)": [[5, "improveai.decision.Decision.get"]], "givens (decision property)": [[5, "improveai.decision.Decision.givens"]], "id_ (decision property)": [[5, "improveai.decision.Decision.id_"]], "improveai.decision": [[5, "module-improveai.decision"]], "peek() (decision method)": [[5, "improveai.decision.Decision.peek"]], "ranked (decision property)": [[5, "improveai.decision.Decision.ranked"]], "track() (decision method)": [[5, "improveai.decision.Decision.track"]], "decisioncontext (class in improveai.decision_context)": [[6, "improveai.decision_context.DecisionContext"]], "__init__() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.__init__"]], "choose_first() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.choose_first"]], "choose_from() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.choose_from"]], "choose_multivariate() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.choose_multivariate"]], "choose_random() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.choose_random"]], "decide() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.decide"]], "decision_model (decisioncontext property)": [[6, "improveai.decision_context.DecisionContext.decision_model"]], "first() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.first"]], "givens (decisioncontext property)": [[6, "improveai.decision_context.DecisionContext.givens"]], "improveai.decision_context": [[6, "module-improveai.decision_context"]], "optimize() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.optimize"]], "random() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.random"]], "rank() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.rank"]], "score() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.score"]], "which() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.which"]], "which_from() (decisioncontext method)": [[6, "improveai.decision_context.DecisionContext.which_from"]], "decisionmodel (class in improveai.decision_model)": [[7, "improveai.decision_model.DecisionModel"]], "model_name_regexp (decisionmodel attribute)": [[7, "improveai.decision_model.DecisionModel.MODEL_NAME_REGEXP"]], "supported_calls (decisionmodel attribute)": [[7, "improveai.decision_model.DecisionModel.SUPPORTED_CALLS"]], "tiebreaker_multiplier (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.TIEBREAKER_MULTIPLIER"]], "__init__() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.__init__"]], "add_reward() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.add_reward"]], "choose_first() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.choose_first"]], "choose_from() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.choose_from"]], "choose_multivariate() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.choose_multivariate"]], "choose_random() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.choose_random"]], "chooser (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.chooser"]], "decide() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.decide"]], "first() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.first"]], "full_factorial_variants() (decisionmodel static method)": [[7, "improveai.decision_model.DecisionModel.full_factorial_variants"]], "given() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.given"]], "givens_provider (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.givens_provider"]], "improveai.decision_model": [[7, "module-improveai.decision_model"]], "last_decision_id (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.last_decision_id"]], "load() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.load"]], "load_model() (in module improveai.decision_model)": [[7, "improveai.decision_model.load_model"]], "model_name (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.model_name"]], "optimize() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.optimize"]], "random() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.random"]], "rank() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.rank"]], "score() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.score"]], "track_api_key (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.track_api_key"]], "track_url (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.track_url"]], "tracker (decisionmodel property)": [[7, "improveai.decision_model.DecisionModel.tracker"]], "which() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.which"]], "which_from() (decisionmodel method)": [[7, "improveai.decision_model.DecisionModel.which_from"]], "api_key_header (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.API_KEY_HEADER"]], "decision_id_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.DECISION_ID_KEY"]], "decision_type (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.DECISION_TYPE"]], "decisiontracker (class in improveai.decision_tracker)": [[8, "improveai.decision_tracker.DecisionTracker"]], "givens_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.GIVENS_KEY"]], "message_id_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.MESSAGE_ID_KEY"]], "model_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.MODEL_KEY"]], "payload_for_error_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.PAYLOAD_FOR_ERROR_KEY"]], "request_error_code_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.REQUEST_ERROR_CODE_KEY"]], "reward_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.REWARD_KEY"]], "reward_type (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.REWARD_TYPE"]], "runners_up_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.RUNNERS_UP_KEY"]], "sample_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.SAMPLE_KEY"]], "type_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.TYPE_KEY"]], "variants_count_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.VARIANTS_COUNT_KEY"]], "variant_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.VARIANT_KEY"]], "__init__() (decisiontracker method)": [[8, "improveai.decision_tracker.DecisionTracker.__init__"]], "add_reward() (decisiontracker method)": [[8, "improveai.decision_tracker.DecisionTracker.add_reward"]], "api_key (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.api_key"]], "do_post_improve_request() (decisiontracker method)": [[8, "improveai.decision_tracker.DecisionTracker.do_post_improve_request"]], "get_sample() (decisiontracker method)": [[8, "improveai.decision_tracker.DecisionTracker.get_sample"]], "improveai.decision_tracker": [[8, "module-improveai.decision_tracker"]], "max_runners_up (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.max_runners_up"]], "post_improve_request() (decisiontracker method)": [[8, "improveai.decision_tracker.DecisionTracker.post_improve_request"]], "track() (decisiontracker method)": [[8, "improveai.decision_tracker.DecisionTracker.track"]], "track_url (decisiontracker property)": [[8, "improveai.decision_tracker.DecisionTracker.track_url"]], "featureencoder (class in improveai.feature_encoder)": [[9, "improveai.feature_encoder.FeatureEncoder"]], "variant_metadata_parameter_name (featureencoder attribute)": [[9, "improveai.feature_encoder.FeatureEncoder.VARIANT_METADATA_PARAMETER_NAME"]], "encode() (in module improveai.feature_encoder)": [[9, "improveai.feature_encoder.encode"]], "hash_to_feature_name() (in module improveai.feature_encoder)": [[9, "improveai.feature_encoder.hash_to_feature_name"]], "improveai.feature_encoder": [[9, "module-improveai.feature_encoder"]], "reverse_sprinkle() (in module improveai.feature_encoder)": [[9, "improveai.feature_encoder.reverse_sprinkle"]], "shrink() (in module improveai.feature_encoder)": [[9, "improveai.feature_encoder.shrink"]], "sprinkle() (in module improveai.feature_encoder)": [[9, "improveai.feature_encoder.sprinkle"]], "warn_about_array_encoding() (in module improveai.feature_encoder)": [[9, "improveai.feature_encoder.warn_about_array_encoding"]], "givensprovider (class in improveai.givens_provider)": [[10, "improveai.givens_provider.GivensProvider"]], "givens() (givensprovider method)": [[10, "improveai.givens_provider.GivensProvider.givens"]], "improveai.givens_provider": [[10, "module-improveai.givens_provider"]], "improveai.improve_model_cli": [[11, "module-improveai.improve_model_cli"]], "mockup_and_execute() (in module improveai.improve_model_cli)": [[11, "improveai.improve_model_cli.mockup_and_execute"]], "cython_backend_available (in module improveai.settings)": [[12, "improveai.settings.CYTHON_BACKEND_AVAILABLE"]], "debug (in module improveai.settings)": [[12, "improveai.settings.DEBUG"]], "gcc_and_py3_dev_installed() (in module improveai.settings)": [[12, "improveai.settings.gcc_and_py3_dev_installed"]], "improveai.settings": [[12, "module-improveai.settings"]], "improveai.utils": [[13, "module-improveai.utils"]], "encoded_variant_to_np() (in module improveai.utils.choosers_feature_encoding_tools)": [[14, "improveai.utils.choosers_feature_encoding_tools.encoded_variant_to_np"]], "encoded_variants_to_np() (in module improveai.utils.choosers_feature_encoding_tools)": [[14, "improveai.utils.choosers_feature_encoding_tools.encoded_variants_to_np"]], "improveai.utils.choosers_feature_encoding_tools": [[14, "module-improveai.utils.choosers_feature_encoding_tools"]], "append_prefix_to_dict_keys() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.append_prefix_to_dict_keys"]], "check_variants() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.check_variants"]], "get_variants_from_args() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.get_variants_from_args"]], "improveai.utils.general_purpose_tools": [[15, "module-improveai.utils.general_purpose_tools"]], "impute_missing_dict_keys() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.impute_missing_dict_keys"]], "is_object_numpy_type() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.is_object_numpy_type"]], "is_valid_ksuid() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.is_valid_ksuid"]], "is_valid_variants_type() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.is_valid_variants_type"]], "read_jsonstring_from_file() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.read_jsonstring_from_file"]], "sigmoid() (in module improveai.utils.general_purpose_tools)": [[15, "improveai.utils.general_purpose_tools.sigmoid"]], "check_and_get_unzipped_model() (in module improveai.utils.gzip_tools)": [[16, "improveai.utils.gzip_tools.check_and_get_unzipped_model"]], "get_unzip_gz() (in module improveai.utils.gzip_tools)": [[16, "improveai.utils.gzip_tools.get_unzip_gz"]], "improveai.utils.gzip_tools": [[16, "module-improveai.utils.gzip_tools"]], "is_gz_bytes() (in module improveai.utils.gzip_tools)": [[16, "improveai.utils.gzip_tools.is_gz_bytes"]], "get_model_bytes_from_url() (in module improveai.utils.url_tools)": [[17, "improveai.utils.url_tools.get_model_bytes_from_url"]], "improveai.utils.url_tools": [[17, "module-improveai.utils.url_tools"]], "is_path_http_addr() (in module improveai.utils.url_tools)": [[17, "improveai.utils.url_tools.is_path_http_addr"]]}})